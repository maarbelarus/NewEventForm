[{"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\index.tsx":"1","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\App.tsx":"2","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\ResultModal\\ResultModal.tsx":"3","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\NewEvent.tsx":"4","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\reducers\\index.ts":"5","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\reducers\\ResultModal\\index.tsx":"6","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\reducers\\NewEvent\\index.ts":"7","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\actions\\NewEvent\\index.ts":"8","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\TextField\\TextField.tsx":"9","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\index.ts":"10","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\Button\\Button.tsx":"11","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\Modal\\Modal.tsx":"12","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\About\\About.tsx":"13","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\About\\constants.ts":"14","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\Select\\Select.tsx":"15","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\RadioGroup\\RadioGroup.types.ts":"16","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\RadioGroup\\RadioGroup.tsx":"17","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\Coordinator\\Coordinator.tsx":"18","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\When\\When.tsx":"19","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\DateTime\\DateTime.tsx":"20","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\constants.ts":"21"},{"size":430,"mtime":1608392441431,"results":"22","hashOfConfig":"23"},{"size":289,"mtime":1608392067658,"results":"24","hashOfConfig":"23"},{"size":702,"mtime":1608411852399,"results":"25","hashOfConfig":"23"},{"size":4549,"mtime":1608481595409,"results":"26","hashOfConfig":"23"},{"size":252,"mtime":1608397262191,"results":"27","hashOfConfig":"23"},{"size":733,"mtime":1608411852419,"results":"28","hashOfConfig":"23"},{"size":676,"mtime":1608481443013,"results":"29","hashOfConfig":"23"},{"size":760,"mtime":1608481185244,"results":"30","hashOfConfig":"23"},{"size":1222,"mtime":1608465355250,"results":"31","hashOfConfig":"23"},{"size":375,"mtime":1608432673248,"results":"32","hashOfConfig":"23"},{"size":334,"mtime":1608410672759,"results":"33","hashOfConfig":"23"},{"size":216,"mtime":1608411539684,"results":"34","hashOfConfig":"23"},{"size":2363,"mtime":1608433005574,"results":"35","hashOfConfig":"23"},{"size":204,"mtime":1608421307214,"results":"36","hashOfConfig":"23"},{"size":1117,"mtime":1608432204388,"results":"37","hashOfConfig":"23"},{"size":221,"mtime":1608421251659,"results":"38","hashOfConfig":"23"},{"size":962,"mtime":1608432672368,"results":"39","hashOfConfig":"23"},{"size":939,"mtime":1608433140921,"results":"40","hashOfConfig":"23"},{"size":986,"mtime":1608433416934,"results":"41","hashOfConfig":"23"},{"size":724,"mtime":1608433469938,"results":"42","hashOfConfig":"23"},{"size":188,"mtime":1608430746913,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"thy5ng",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":11,"warningCount":0,"fixableErrorCount":11,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\index.tsx",[],["96","97","98","99","100"],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\App.tsx",[],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\ResultModal\\ResultModal.tsx",[],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\NewEvent.tsx",["101","102","103","104"],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\reducers\\index.ts",[],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\reducers\\ResultModal\\index.tsx",["105","106"],"import { IResultModalAction, IResultModalState } from \"./ResultModal.types\";\n\nexport const resultModalState: IResultModalState = {\n  isOpen: false,\n  type: \"success\"\n};\n\nexport function resultModalReducer(state: IResultModalState = resultModalState, action: IResultModalAction) {\n  switch (action.type) {\n    case \"setSuccess\": {\n      return { isOpen: true, type: \"success\" } as IResultModalState;\n    }\n    case \"setError\": {\n      return { isOpen: true, type: \"error\" } as IResultModalState;\n    }\n    case \"closeModal\": {\n      return { ...state, isOpen: false };\n    }\n    default:\n      return state;\n  }\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\reducers\\NewEvent\\index.ts",["107"],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\actions\\NewEvent\\index.ts",["108"],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\TextField\\TextField.tsx",["109"],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\index.ts",[],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\Button\\Button.tsx",["110"],"import React from \"react\";\nimport clsx from \"clsx\";\nimport { IButton } from \"./Button.types\";\nimport \"./styles.scss\";\n\nexport function Button({ primary, children, onClick }: IButton) {\n  return (\n    <button type=\"button\" className={clsx(\"buttonCommon\", primary && \"primary\")} onClick={onClick}>\n      {children}\n    </button>\n  );\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\Modal\\Modal.tsx",["111"],"import React from \"react\";\nimport { IModal } from \"./IModal\";\nimport \"./styles.scss\";\n\nexport function Modal({ isOpen, children }: IModal) {\n  return <>{isOpen && <div className=\"modalCommon\">{children}</div>}</>;\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\About\\About.tsx",["112","113"],"import React from \"react\";\nimport { TextField, Select, RadioGroup } from \"components/common\";\nimport clsx from \"clsx\";\nimport \"./styles.scss\";\nimport { IAbout } from \"./About.types\";\nimport { MAX_DESCRIPTION_LENGTH, paidRadioList } from \"./constants\";\n\nexport function About({\n  title,\n  setTitle,\n  description,\n  setDescription,\n  category,\n  setCategory,\n  categoryList,\n  payment,\n  onPaymentChange,\n  fee,\n  onFeeChange,\n  reward,\n  onRewardChange,\n  validationErrors\n}: IAbout) {\n  console.log(\"validationErrors\", validationErrors);\n  return (\n    <div className={clsx(\"aboutContainer\", \"formElementContainer\")}>\n      <h2 className=\"formElementTitle\">About</h2>\n      <TextField\n        className=\"inputItem\"\n        fullWidth\n        label=\"Title *\"\n        onChange={e => {\n          setTitle(e.target.value as string);\n        }}\n        value={title}\n        validationError={validationErrors.title}\n      />\n      <TextField\n        className=\"inputItem\"\n        fullWidth\n        label=\"Description *\"\n        maxLength={MAX_DESCRIPTION_LENGTH}\n        multiline\n        onChange={e => {\n          setDescription(e.target.value as string);\n        }}\n        value={description}\n        validationError={validationErrors.description}\n      />\n      <Select\n        value={category}\n        onChange={setCategory}\n        optionList={categoryList}\n        label=\"Category\"\n        fullWidth\n        className=\"inputItem\"\n        validationError={validationErrors.category}\n      />\n      <div className=\"paymentContainer\">\n        <RadioGroup\n          name=\"payment\"\n          value={payment}\n          onChange={onPaymentChange}\n          optionList={paidRadioList}\n          label=\"Payment\"\n          className=\"inputItem\"\n          validationError={validationErrors.payment}\n        />\n        {payment && (\n          <TextField\n            className=\"feeContainer\"\n            value={fee}\n            onChange={e => onFeeChange(e.target.value as number)}\n            type=\"number\"\n            label=\"Fee\"\n            validationError={validationErrors.fee}\n          />\n        )}\n      </div>\n      <TextField\n        className=\"inputItem\"\n        value={reward}\n        onChange={e => onRewardChange(e.target.value as number)}\n        type=\"number\"\n        label=\"Reward\"\n        afterText=\"reward points for attendance\"\n        validationError={validationErrors.reward}\n      />\n    </div>\n  );\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\About\\constants.ts",[],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\Select\\Select.tsx",["114"],"import React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport { ISelect } from \"./Select.types\";\nimport \"./styles.scss\";\n\nexport function Select({ value, onChange, label, fullWidth, className, optionList, validationError = \"\" }: ISelect) {\n  const [isOptionListOpened, setIsOptionListOpened] = useState<boolean>(false);\n\n  const handleOptionClick = item => {\n    setIsOptionListOpened(!isOptionListOpened);\n    onChange(item);\n  };\n\n  return (\n    <div className={clsx(\"selectCommon\", fullWidth && \"fullWidth\", validationError && \"error\", className)}>\n      <div className=\"label\">{label}</div>\n      <input readOnly value={value.label} onClick={() => setIsOptionListOpened(!isOptionListOpened)} />\n      {isOptionListOpened && (\n        <div className=\"optionList\">\n          {optionList.map(option => (\n            <button type=\"button\" className=\"optionItem\" key={option.id} onClick={() => handleOptionClick(option)}>\n              {option.label}\n            </button>\n          ))}\n        </div>\n      )}\n      {validationError && <div className=\"errorText\">{validationError}</div>}\n    </div>\n  );\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\RadioGroup\\RadioGroup.types.ts",["115","116","117","118","119","120","121","122","123","124","125"],"D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\RadioGroup\\RadioGroup.tsx",["126","127"],"import React from \"react\";\nimport clsx from \"clsx\";\nimport \"./RadioGroup.scss\";\nimport { IRadioGroup } from \"./RadioGroup.types\";\n\nexport function RadioGroup({ name, value, onChange, optionList, label, className, validationError = \"\" }: IRadioGroup) {\n  return (\n    <div className={clsx(\"radioGroupCommon\", validationError && \"error\", className)}>\n      <div className=\"radioGroupLabel\">{label}</div>\n      {optionList.map(option => (\n        <span key={`${option.id}-${option.label}`}>\n          <input\n            type=\"radio\"\n            id={`${option.id}-${option.label}`}\n            checked={option.value === value}\n            name={name}\n            onChange={() => onChange(option.value)}\n          />\n          <label htmlFor={`${option.id}-${option.label}`} className=\"radioLabel\">\n            {option.label}\n          </label>\n        </span>\n      ))}\n      {validationError && <div className=\"errorText\">{validationError}</div>}\n    </div>\n  );\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\Coordinator\\Coordinator.tsx",["128"],"import React from \"react\";\nimport clsx from \"clsx\";\nimport \"./styles.scss\";\nimport { Select, TextField } from \"components/common\";\nimport { ICoordinator } from \"./Coordinator.types\";\n\nexport function Coordinator({ coordinator, setCoordinator, coordinatorList, validationErrors }: ICoordinator) {\n  return (\n    <div className={clsx(\"coordinatorContainer\", \"formElementContainer\")}>\n      <h2 className=\"formElementTitle\">Coordinator</h2>\n      <Select\n        value={coordinator}\n        onChange={setCoordinator}\n        optionList={coordinatorList}\n        label=\"Responsible *\"\n        fullWidth\n        className=\"inputItem\"\n        validationError={validationErrors.coordinator}\n      />\n      <TextField\n        fullWidth\n        className={clsx(\"inputItem\", \"readonly\")}\n        onChange={() => {\n          return null;\n        }}\n        value={coordinator?.email}\n        label=\"Email\"\n        readonly\n      />\n    </div>\n  );\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\When\\When.tsx",["129"],"import React from \"react\";\nimport clsx from \"clsx\";\nimport { DateTime, TextField } from \"components/common\";\nimport { IWhen } from \"./When.types\";\n\nexport function When({ duration, onDurationChange, date, onDateChange, time, onTimeChange }: IWhen) {\n  return (\n    <div className={clsx(\"whenContainer\", \"formElementContainer\")}>\n      <h2 className=\"formElementTitle\">When</h2>\n      <DateTime\n        label=\"Starts on *\"\n        betweenText=\"at\"\n        date={date}\n        onDateChange={e => onDateChange(e.target.value)}\n        time={time}\n        onTimeChange={e => onTimeChange(e.target.value)}\n      />\n      <TextField\n        className=\"inputItem\"\n        value={duration}\n        onChange={e => onDurationChange(e.target.value as number)}\n        type=\"number\"\n        label=\"Duration\"\n        afterText=\"hour\"\n      />\n    </div>\n  );\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\common\\DateTime\\DateTime.tsx",["130"],"import React from \"react\";\nimport \"./styles.scss\";\nimport clsx from \"clsx\";\nimport { IDateTime } from \"./DateTime.types\";\n\nexport function DateTime({\n  label,\n  betweenText = \"\",\n  date,\n  onDateChange,\n  time,\n  onTimeChange,\n  validationError = \"\"\n}: IDateTime) {\n  return (\n    <div className={clsx(\"dateTimeCommon\", validationError && \"error\")}>\n      <div className=\"label\">{label}</div>\n      <div>\n        <input type=\"date\" value={date} onChange={onDateChange} />\n        {betweenText && <span className=\"betweenText\">{betweenText}</span>}\n        <input type=\"time\" value={time} onChange={onTimeChange} />\n      </div>\n      {validationError && <div className=\"errorText\">{validationError}</div>}\n    </div>\n  );\n}\n","D:\\Work\\etc\\TestTasks\\Epam\\Project\\test-app\\src\\components\\NewEvent\\constants.ts",[],{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":18,"column":44,"nodeType":"143","messageId":"144","endLine":18,"endColumn":47,"suggestions":"145"},{"ruleId":"141","severity":1,"message":"142","line":22,"column":50,"nodeType":"143","messageId":"144","endLine":22,"endColumn":53,"suggestions":"146"},{"ruleId":"147","severity":1,"message":"148","line":33,"column":9,"nodeType":"149","messageId":"150","endLine":33,"endColumn":20},{"ruleId":"141","severity":1,"message":"142","line":41,"column":26,"nodeType":"143","messageId":"144","endLine":41,"endColumn":29,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":1,"column":10,"nodeType":"154","messageId":"155","endLine":1,"endColumn":28},{"ruleId":"152","severity":1,"message":"156","line":1,"column":30,"nodeType":"154","messageId":"155","endLine":1,"endColumn":47},{"ruleId":"152","severity":1,"message":"157","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":24},{"ruleId":"147","severity":1,"message":"148","line":8,"column":3,"nodeType":"149","messageId":"150","endLine":8,"endColumn":14},{"ruleId":"152","severity":1,"message":"158","line":3,"column":10,"nodeType":"154","messageId":"155","endLine":3,"endColumn":20},{"ruleId":"152","severity":1,"message":"159","line":3,"column":10,"nodeType":"154","messageId":"155","endLine":3,"endColumn":17},{"ruleId":"152","severity":1,"message":"160","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":16},{"ruleId":"152","severity":1,"message":"161","line":5,"column":10,"nodeType":"154","messageId":"155","endLine":5,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":24,"column":3,"nodeType":"149","messageId":"150","endLine":24,"endColumn":14},{"ruleId":"152","severity":1,"message":"162","line":3,"column":10,"nodeType":"154","messageId":"155","endLine":3,"endColumn":17},{"ruleId":"163","severity":2,"message":"164","line":1,"column":20,"nodeType":null,"endLine":1,"endColumn":21,"fix":"165"},{"ruleId":"163","severity":2,"message":"164","line":2,"column":14,"nodeType":null,"endLine":2,"endColumn":15,"fix":"166"},{"ruleId":"163","severity":2,"message":"164","line":3,"column":17,"nodeType":null,"endLine":3,"endColumn":18,"fix":"167"},{"ruleId":"163","severity":2,"message":"164","line":4,"column":17,"nodeType":null,"endLine":4,"endColumn":18,"fix":"168"},{"ruleId":"163","severity":2,"message":"164","line":5,"column":2,"nodeType":null,"endLine":5,"endColumn":3,"fix":"169"},{"ruleId":"163","severity":2,"message":"164","line":6,"column":1,"nodeType":null,"endLine":6,"endColumn":2,"fix":"170"},{"ruleId":"163","severity":2,"message":"164","line":7,"column":31,"nodeType":null,"endLine":7,"endColumn":32,"fix":"171"},{"ruleId":"163","severity":2,"message":"164","line":8,"column":16,"nodeType":null,"endLine":8,"endColumn":17,"fix":"172"},{"ruleId":"163","severity":2,"message":"164","line":9,"column":17,"nodeType":null,"endLine":9,"endColumn":18,"fix":"173"},{"ruleId":"163","severity":2,"message":"164","line":10,"column":25,"nodeType":null,"endLine":10,"endColumn":26,"fix":"174"},{"ruleId":"163","severity":2,"message":"175","line":11,"column":2,"nodeType":null,"endLine":11,"endColumn":2,"fix":"176"},{"ruleId":"152","severity":1,"message":"177","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":21},{"ruleId":"152","severity":1,"message":"178","line":6,"column":83,"nodeType":"154","messageId":"155","endLine":6,"endColumn":98},{"ruleId":"152","severity":1,"message":"179","line":5,"column":10,"nodeType":"154","messageId":"155","endLine":5,"endColumn":22},{"ruleId":"152","severity":1,"message":"180","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":15},{"ruleId":"152","severity":1,"message":"181","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":19},"lines-around-directive",["182"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["183","184"],["185","186"],"no-console","Unexpected console statement.","MemberExpression","unexpected",["187","188"],"@typescript-eslint/no-unused-vars","'IResultModalAction' is defined but never used.","Identifier","unusedVar","'IResultModalState' is defined but never used.","'INewEventState' is defined but never used.","'ITextField' is defined but never used.","'IButton' is defined but never used.","'IModal' is defined but never used.","'IAbout' is defined but never used.","'ISelect' is defined but never used.","prettier/prettier","Delete `␍`",{"range":"189","text":"190"},{"range":"191","text":"190"},{"range":"192","text":"190"},{"range":"193","text":"190"},{"range":"194","text":"190"},{"range":"195","text":"190"},{"range":"196","text":"190"},{"range":"197","text":"190"},{"range":"198","text":"190"},{"range":"199","text":"190"},"Insert `⏎`",{"range":"200","text":"201"},"'IRadioGroup' is defined but never used.","'validationError' is assigned a value but never used.","'ICoordinator' is defined but never used.","'IWhen' is defined but never used.","'IDateTime' is defined but never used.","padding-line-between-statements",{"messageId":"202","fix":"203","desc":"204"},{"messageId":"205","fix":"206","desc":"207"},{"messageId":"202","fix":"208","desc":"204"},{"messageId":"205","fix":"209","desc":"207"},{"messageId":"202","fix":"210","desc":"204"},{"messageId":"205","fix":"211","desc":"207"},[19,20],"",[34,35],[52,53],[70,71],[73,74],[75,76],[107,108],[124,125],[142,143],[168,169],[171,171],"\n","suggestUnknown",{"range":"212","text":"213"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"212","text":"214"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"215","text":"213"},{"range":"215","text":"214"},{"range":"216","text":"213"},{"range":"216","text":"214"},[879,882],"unknown","never",[1109,1112],[1668,1671]]